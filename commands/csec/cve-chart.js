const { AttachmentBuilder, EmbedBuilder } = require('discord.js'); // Require the Discord.js library
const Canvas = require('canvas'); // Require the canvas library
const mongoose = require('mongoose'); // Require the mongoose library
const Cve =require('../twitter/db/cveschema.js');
const Chart = require("chart.js/auto");
const fs = require('fs');

module.exports = {
  name: 'cve-chart',
  description: 'Generates a graph showing the frequency with which CVEs are mentioned',
  usage: '+cve-chart',
  async execute(client, message, args) {

    // Query the database for all the CVE documents
    const cves = await Cve.find();
    if (cves.length === 0) {
      return message.channel.send('No CVEs found in the database.');
    }

    // Sort the CVEs by count in descending order
    cves.sort((a, b) => b.count - a.count);
    const numCharts = 3; //for dynamic chart generation: Math.ceil(cves.length / 25);
    const initialdat = cves.map((cve)=>cve.count);

    for (let i = 0; i < numCharts; i++) {
      // Get the group of 25 CVEs for this chart
      const cveGroup = cves.slice(i * 25, (i + 1) * 25);
    
      // Sort the group of CVEs by count in descending order
      cveGroup.sort((a, b) => b.count - a.count);
    
      // Create the bar chart
      const canvas = Canvas.createCanvas(800, 600);
      const ctx = canvas.getContext('2d');
      const labels = cveGroup.map((cve) => cve.id);
      const data = cveGroup.map((cve) => cve.count);
      const chart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: 'Number of mentions',
            data: data,
            backgroundColor: '#0099ff',
            borderColor: '#0099ff',
            borderWidth: 1,
          }],
        },
        options: { scales: {
          y: {
          	 beginAtZero: true,
         	   max: Math.max(...cves.map((cve) => cve.count))
        	}
        }
        },
        
      });
      chart.update();
    
      // Save the chart as an image file
      const chartBuffer = canvas.toBuffer();
      fs.writeFileSync(`./chart-${i}.png`, chartBuffer);
    
      // Send the chart as an attachment in an embed message
      const file = new AttachmentBuilder(`./chart-${i}.png`);
      const embed = new EmbedBuilder()
      .setTitle(`CVE Frequency Chart (${i * 25 + 1}-${(i + 1) * 25}/${cves.length})`)
        .setImage(`attachment://chart-${i}.png`)
        .setColor(0x0099ff);
      await message.channel.send({
        embed: [embed],
        files: [file]
      });
    }
  },
};    